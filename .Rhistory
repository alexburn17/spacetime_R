# read data R wrapper
raster.trim <- function(data){
ds = raster_trim(data)
return(ds)
}
raster.align <- function(data, resolution="None", SRS="None", noneVal="None"){
# align rasters
newObj = raster_align(data=data, resolution=resolution, SRS=SRS, noneVal=noneVal)
return(newObj)
}
make.cube <- function(data, fileName = "None", organizeFiles = "filestotime", organizeBands="bandstotime", varNames="None", timeObj = "None"){
# align rasters
newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles, varNames=varNames, timeObj = timeObj)
return(newObj)
}
# get lat wrapper
get_lat <- function(obj){
x = py_to_r(obj$get_lat())
return(x)
}
# get lon wrapper
get_lon <- function(obj){
x = py_to_r(obj$get_lon())
return(x)
}
# get UL corner wrapper
get_UL_corner <- function(obj){
x = py_to_r(obj$get_UL_corner())
return(x)
}
# get EPSG code wrapper
get_epsg_code <- function(obj){
x = py_to_r(obj$get_epsg_code())
return(x)
}
# get units wrapper
get_units <- function(obj){
x = py_to_r(obj$get_units())
return(x)
}
# get band number wrapper
get_band_number <- function(obj){
x = py_to_r(obj$get_band_number())
return(x)
}
# get raster dims wrapper
get_dims <- function(obj){
x = unlist(py_to_r(obj$get_dims()))
x <- split(x, ceiling(seq_along(unlist(x))/2))
return(x)
}
# get nodata value wrapper
get_nodata_value <- function(obj){
x = py_to_r(obj$get_nodata_value())
return(x)
}
# get data wrapper
get_data_array <- function(obj){
x = py_to_r(obj$get_data_array())
return(x)
}
# get GDAL data wrapper
get_GDAL_data <- function(obj){
x = py_to_r(obj$get_GDAL_data())
return(x)
}
# get time wrapper
get_time <- function(obj){
x = py_to_r(obj$get_time())
return(x)
}
# get var names wrapper
get_var_names <- function(obj){
x = py_to_r(obj$get_var_names())
return(x)
}
ds <- read.data(dataPaths)
newObj = raster_align(data=ds, noneVal = -9999, SRS=4326)
trimmed = raster.trim(newObj)
cube = make.cube(data = trimmed, fileName = "cpcm.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
cube = make.cube(data = trimmed, fileName = "cpcm.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
cube$get_band_number()
ds <- read.data(dataPaths)
newObj = raster_align(data=ds, noneVal = -9999, SRS=4326)
trimmed = raster.trim(newObj)
cube = make.cube(data = trimmed, fileName = "cpcm1.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
cube$get_band_number()
get_time(cube)
get_time(trimmed)
# read in data
ds = read_data(dataPaths)
# align rasters
newObj = raster_align(data=ds, noneVal = -9999, SRS=4326)
# trim the rasters to the same greatest common bounding box
trimmed = raster_trim(newObj)
# make the aligned file object into a cube with a time element (writes the new file to disk)
cube = make_cube(data = trimmed, fileName = "cpcm.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
ds <- read.data(dataPaths)
newObj = raster_align(data=ds, noneVal = -9999, SRS=4326)
trimmed = raster.trim(newObj)
cube = make.cube(data = trimmed, fileName = "c.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
make.cube <- function(data, fileName, organizeFiles = "filestotime", organizeBands="bandstotime", varNames, timeObj){
# align rasters
newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles, varNames=varNames, timeObj = timeObj)
return(newObj)
}
ds <- read.data(dataPaths)
newObj = raster_align(data=ds, noneVal = -9999, SRS=4326)
trimmed = raster.trim(newObj)
cube = make.cube(data = trimmed, fileName = "c.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
make.cube <- function(data, fileName, organizeFiles = "filestotime", organizeBands="bandstotime", varNames="None", timeObj="None"){
# align rasters
newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles, varNames=varNames, timeObj = timeObj)
return(newObj)
}
cube = make.cube(data = trimmed, fileName = "c.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
cube = make.cube(data = trimmed, fileName = "c.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
make.cube <- function(data, fileName, organizeFiles = "filestotime", organizeBands="bandstotime", varNames="None", timeObj="None"){
# align rasters
newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles, varNames=None, timeObj = None)
return(newObj)
}
cube = make.cube(data = trimmed, fileName = "cp.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
# align rasters
newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles)
make.cube <- function(data, fileName, organizeFiles = "filestotime", organizeBands="bandstotime", varNames="None", timeObj="None"){
# align rasters
newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles)
return(newObj)
}
cube = make.cube(data = trimmed, fileName = "cp.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
make.cube <- function(data, fileName, organizeFiles = "filestotime", organizeBands="bandstotime", varNames="None", timeObj="None"){
# align rasters
if(varNames == "None" & timeObj == "None"){
newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles)
} else if(varNames == "None" & timeObj != "None"){
newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles, timeObj=timeObj)
} else {
newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles, varNames=varNames, timeObj=timeObj)
}
return(newObj)
}
ds <- read.data(dataPaths)
newObj = raster_align(data=ds, noneVal = -9999, SRS=4326)
trimmed = raster.trim(newObj)
cube = make.cube(data = trimmed, fileName = "cp.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
cube = make.cube(data = trimmed, fileName = "cp4.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
make.cube <- function(data, fileName, organizeFiles = "filestotime", organizeBands="bandstotime", varNames="None", timeObj="None"){
# align rasters
if(varNames == "None" & timeObj == "None"){
newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles)
} else if(varNames == "None" & timeObj != "None"){
newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles, timeObj=timeObj)
} else {
newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles, varNames=varNames, timeObj=timeObj)
}
return(newObj)
}
ds <- read.data(dataPaths)
newObj = raster_align(data=ds, noneVal = -9999, SRS=4326)
trimmed = raster.trim(newObj)
cube = make.cube(data = trimmed, fileName = "cp4.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
#load the reticulate package
library(reticulate)
setwd("~/Documents/GitHub/spacetime_R")
# activate environment
use_condaenv(condaenv = "barra_python", conda = "auto", required = FALSE)
# source modules
source_python("spacetime/input/readData.py", convert = F)
source_python("spacetime/scale/rasterAlign.py", convert = F)
source_python("spacetime/scale/rasterTrim.py", convert = F)
source_python("spacetime/objects/fileObject.py", convert = F)
source_python("spacetime/operations/cubeSmasher.py", convert = F)
source_python("spacetime/operations/makeCube.py", convert = F)
source_python("spacetime/operations/loadCube.py", convert = F)
source_python("spacetime/graphics/dataPlot.py", convert = F)
source_python("spacetime/output/writeCSV.py", convert = F)
source_python("spacetime/operations/time.py", convert = F)
source_python("spacetime/operations/cubeToDataframe.py", convert = F)
# get tif files from CpCM folder
dataPaths <- list.files(path="CpCM", pattern="*.tif", full.names=TRUE, recursive=FALSE)
# read data R wrapper
read.data <- function(data){
ds = read_data(data)
return(ds)
}
# read data R wrapper
raster.trim <- function(data){
ds = raster_trim(data)
return(ds)
}
raster.align <- function(data, resolution, SRS, noneVal){
# align rasters
newObj = raster_align(data=data, resolution=resolution, SRS=SRS, noneVal=noneVal)
return(newObj)
}
make.cube <- function(data, fileName, organizeFiles = "filestotime", organizeBands="bandstotime", varNames="None", timeObj="None"){
# align rasters
if(varNames == "None" & timeObj == "None"){
newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles)
} else if(varNames == "None" & timeObj != "None"){
newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles, timeObj=timeObj)
} else {
newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles, varNames=varNames, timeObj=timeObj)
}
return(newObj)
}
# get lat wrapper
get_lat <- function(obj){
x = py_to_r(obj$get_lat())
return(x)
}
# get lon wrapper
get_lon <- function(obj){
x = py_to_r(obj$get_lon())
return(x)
}
# get UL corner wrapper
get_UL_corner <- function(obj){
x = py_to_r(obj$get_UL_corner())
return(x)
}
# get EPSG code wrapper
get_epsg_code <- function(obj){
x = py_to_r(obj$get_epsg_code())
return(x)
}
# get units wrapper
get_units <- function(obj){
x = py_to_r(obj$get_units())
return(x)
}
# get band number wrapper
get_band_number <- function(obj){
x = py_to_r(obj$get_band_number())
return(x)
}
# get raster dims wrapper
get_dims <- function(obj){
x = unlist(py_to_r(obj$get_dims()))
x <- split(x, ceiling(seq_along(unlist(x))/2))
return(x)
}
# get nodata value wrapper
get_nodata_value <- function(obj){
x = py_to_r(obj$get_nodata_value())
return(x)
}
# get data wrapper
get_data_array <- function(obj){
x = py_to_r(obj$get_data_array())
return(x)
}
# get GDAL data wrapper
get_GDAL_data <- function(obj){
x = py_to_r(obj$get_GDAL_data())
return(x)
}
# get time wrapper
get_time <- function(obj){
x = py_to_r(obj$get_time())
return(x)
}
# get var names wrapper
get_var_names <- function(obj){
x = py_to_r(obj$get_var_names())
return(x)
}
ds <- read.data(dataPaths)
newObj = raster_align(data=ds, noneVal = -9999, SRS=4326)
trimmed = raster.trim(newObj)
cube = make.cube(data = trimmed, fileName = "cp4.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
cube = make.cube(data = trimmed, fileName = "c4.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
source_python("spacetime/operations/makeCube.py", convert = F)
cube = make.cube(data = trimmed, fileName = "c44.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
raster.align <- function(data, resolution, SRS, noneVal){
print(resolution)
# align rasters
newObj = raster_align(data=data, resolution=resolution, SRS=SRS, noneVal=noneVal)
return(newObj)
}
newObj = raster_align(data=ds, noneVal = -9999, SRS=4326)
trimmed = raster.trim(newObj)
cube = make.cube(data = trimmed, fileName = "c44.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
make.cube <- function(data, fileName, organizeFiles, organizeBands, varNames, timeObj){
newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles, varNames=varNames, timeObj=timeObj)
# align rasters
#if(varNames == "None" & timeObj == "None"){
#  newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles)
#} else if(varNames == "None" & timeObj != "None"){
#  newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles, timeObj=timeObj)
#} else {
#  newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles, varNames=varNames, timeObj=timeObj)
#}
return(newObj)
}
ds <- read.data(dataPaths)
newObj = raster_align(data=ds, noneVal = -9999, SRS=4326)
trimmed = raster.trim(newObj)
cube = make.cube(data = trimmed, fileName = "c444.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
newObj = raster_align(data=ds)
ds <- read.data(dataPaths)
newObj = raster_align(data=ds, noneVal = -9999, SRS=4326)
trimmed = raster.trim(newObj)
get_EPSG_code(newObj)
get_epsg_code(newObj)
get_nodata_value(newObj)
newObj = raster_align(data=ds, noneVal = -9990009, SRS=4326)
trimmed = raster.trim(newObj)
get_nodata_value(newObj)
source("spacetime_wrapper.R")
# get tif files from CpCM folder
dataPaths <- list.files(path="CpCM", pattern="*.tif", full.names=TRUE, recursive=FALSE)
ds <- read.data(dataPaths)
newObj = raster_align(data=ds, noneVal = -9999, SRS=4326)
trimmed = raster.trim(newObj)
cube = make.cube(data = trimmed, fileName = "c44.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
source("spacetime_wrapper.R")
# get tif files from CpCM folder
dataPaths <- list.files(path="CpCM", pattern="*.tif", full.names=TRUE, recursive=FALSE)
ds <- read.data(dataPaths)
newObj = raster_align(data=ds, noneVal = -9999, SRS=4326)
trimmed = raster.trim(newObj)
cube = make.cube(data = trimmed, fileName = "c44.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
library(devtools)
install_github("alexburn17/spacetime_R")
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
install_github("/alexburn17/spacetime_R")
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
setwd("~/Documents/GitHub/spacetime_R")
source("spacetime_wrapper.R")
source("R/spacetime_wrapper.R")
# get tif files from CpCM folder
dataPaths <- list.files(path="CpCM", pattern="*.tif", full.names=TRUE, recursive=FALSE)
ds <- read.data(dataPaths)
newObj = raster_align(data=ds, noneVal = -9999, SRS=4326)
trimmed = raster.trim(newObj)
cube = make.cube(data = trimmed, fileName = "c44.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
library(devtools)
install_github("alexburn17/spacetime_R")
install.packages("devtollsd")
install_github("alexburn17/spacetime_R")dasfgasd
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
install_github("alexburn17/spacetime_R")
install_github("alexburn17/spacetime_R")
install_github("alexburn17/spacetime_R")
# load the reticulate package
library(reticulate)
# activate environment
use_condaenv(condaenv = "barra_python", conda = "auto", required = FALSE)
# source modules
source_python("spacetime/input/readData.py", convert = F)
source_python("spacetime/scale/rasterTrim.py", convert = F)
source_python("spacetime/objects/fileObject.py", convert = F)
source_python("spacetime/operations/cubeSmasher.py", convert = F)
source_python("spacetime/operations/makeCube.py", convert = F)
source_python("spacetime/operations/loadCube.py", convert = F)
setwd("~/Documents/GitHub/spacetime_R")
install.packages("roxygen2")
library(devtools)
install_github("alexburn17/spacetime_R")
# activate environment
use_condaenv(condaenv = "barra_python", conda = "auto", required = FALSE)
dependancies <- c("pandas")
dependancies <- c("pandas")
py_install(
packages = dependancies,
envname = NULL,
method = "auto",
python_version = 3.9.16,
py_install(
packages = dependancies,
envname = NULL,
method = "auto",
python_version = "3.9.16",
pip = TRUE
)
py_install(
packages = dependancies,
envname = NULL,
method = "conda",
python_version = "3.9.16",
pip = TRUE
)
use_condaenv(condaenv = "r-reticulate", conda = "auto", required = FALSE)
library(devtools)
install_github("alexburn17/spacetime_R")
reticulate::py_config()
library(devtools)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
# python packages to install
dependancies <- c("pandas", "numpy", "netCDF4")
# install python
py_install(
packages = dependancies,
envname = NULL,
method = "conda",
python_version = "3.9.16",
pip = TRUE
)
# python packages to install
dependancies <- c("pandas", "numpy", "netCDF4", "gdal")
# install python
py_install(
packages = dependancies,
envname = NULL,
method = "conda",
python_version = "3.9.16",
pip = TRUE
)
conda_install("r-reticulate", "gdal")
# activate environment
use_condaenv(condaenv = "r-reticulate", conda = "auto", required = TRUE)
# python packages to install
dependancies <- c("pandas", "numpy", "netCDF4", "gdal")
# install python
py_install(
packages = dependancies,
envname = "r-reticulate",
method = "conda",
python_version = "3.9.16",
pip = TRUE
)
library(devtools)
install_github("alexburn17/spacetime_R")
library(spacetime)
# get tif files from CpCM folder
dataPaths <- list.files(path="/Users/pburnham/Documents/data", pattern="*.tif", full.names=TRUE, recursive=FALSE)
do_a_thing(3)
spacetime::do_a_thing(3)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
library(spacetime)
spacetime::do_a_thing(3)
library(spacetime)
install_github("alexburn17/spacetime_R")
library(spacetime)
do_a_thing()
do_a_thing(3)
library(spacetime)
do_a_thing(3)
gc()
library(spacetime)
spacetime::do_a_thing(3)
# activate environment
use_condaenv(condaenv = "r-reticulate", conda = "auto", required = TRUE)
library(reticulate)
# python packages to install
dependancies <- c("pandas", "numpy")
py_install(
packages = dependancies,
envname = "auto",
method = "conda",
python_version = "3.9.16",
pip = TRUE
)
print("installing required python packages")
conda_install("r-reticulate", "gdal")
conda_install("r-reticulate", "xarray")
conda_install("r-reticulate", "psutil")
conda_install("r-reticulate", "plotly_express")
conda_install("r-reticulate", "netCDF4")
# activate environment
use_condaenv(condaenv = "r-reticulate", conda = "auto", required = TRUE)
# activate environment
use_condaenv(condaenv = "r-miniconda", conda = "auto", required = TRUE)
library(reticulate)
# python packages to install
dependancies <- c("pandas", "numpy")
py_install(
packages = dependancies,
envname = "auto",
method = "conda",
python_version = "3.9.16",
pip = TRUE
)
print("installing required python packages")
conda_install("r-reticulate", "gdal")
conda_install("r-reticulate", "xarray")
conda_install("r-reticulate", "psutil")
conda_install("r-reticulate", "plotly_express")
conda_install("r-reticulate", "netCDF4")
# activate environment
use_condaenv(condaenv = "r-miniconda", conda = "auto", required = TRUE)
# activate environment
use_condaenv(condaenv = "r-reticulate", conda = "auto", required = TRUE)
spacetime::do_a_thing(3)
ds <- spacetime::read.data(data=dataPaths)
install_github("xalexburn17/spacetime_R")
library(devtools)
install_github("xalexburn17/spacetime_R")
