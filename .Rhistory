import platform
import platform
# make sure python 3.9 is loaded
print(platform.python_version())
from spacetime.input.readData import read_data
from spacetime.scale.rasterAlign import raster_align
from spacetime.scale.rasterTrim import raster_trim
from spacetime.objects.fileObject import file_object
from spacetime.operations.cubeSmasher import cube_smasher
from spacetime.operations.cubeSmasher import cube_smasher
from spacetime.operations.makeCube import make_cube
from spacetime.operations.loadCube import load_cube
from spacetime.graphics.dataPlot import plot_cube
from spacetime.graphics.dataPlot import plot_cube
from spacetime.operations.time import cube_time, return_time, scale_time, select_time
from spacetime.operations.cubeToDataframe import cube_to_dataframe
library(tidyverse)
library(stringr)
library(raster)
months <- c(paste0("0",seq(1,9)),10,11,12)
years <- seq(1981,1995)
precip <- c(paste0("https://os.zhdk.cloud.switch.ch/envicloud/chelsa/chelsa_V2/GLOBAL/monthly/pr/CHELSA_pr_",
rep(months,30),"_",rep(years,each = 12),"_V.2.1.tif"))
tmin <- c(paste0("https://os.zhdk.cloud.switch.ch/envicloud/chelsa/chelsa_V2/GLOBAL/monthly/tasmin/CHELSA_tasmin_",
rep(months,15),"_",rep(years,each = 12),"_V.2.1.tif"))
tmax <- c(paste0("https://os.zhdk.cloud.switch.ch/envicloud/chelsa/chelsa_V2/GLOBAL/monthly/tasmax/CHELSA_tasmax_",
rep(months,15),"_",rep(years,each = 12),"_V.2.1.tif"))
txt_file <- c(precip, tmin, tmax)
txt_file
# raster I use to define cropping extent
ref_extent <- raster("D:/Climate/CHELSA2/bio1_1981-2010_V.2.1.tif")
# raster I use to define cropping extent
ref_extent <- raster("/Users/pburnham/Documents/geospatialData/Carya_ovata/Carya_ovata_sim_disc_10km.tif")
# raster I use to define cropping extent
ref_extent <- raster("/Users/pburnham/Documents/geospatialData/Carya_ovata/Carya_ovata_sim_disc_10km.tif")
plot(ref_extent)
for(f in c(1:length(txt_file))){
# Download file from CHELSA
url <- txt_file[f]
name <- gsub(".*/CHELSA_","",url)
dest_file <- paste("D:/Climate/CHELSA_BIOCLIM+/",name,sep ="")
download.file(url=url, destfile=dest_file, method="auto", quiet = F, mode = "wb", cacheOK = TRUE)
# Crop and save cropped file
org_file <- raster(dest_file)
e <- extent(ref_extent)
cropped_file <- crop(org_file,e)
writeRaster(cropped_file, filename=dest_file, overwrite=TRUE)
print(name)
}
z
for(f in c(1:length(txt_file))){
# Download file from CHELSA
url <- txt_file[f]
name <- gsub(".*/CHELSA_","",url)
print(name)
dest_file <- paste("D:/Climate/CHELSA_BIOCLIM+/",name,sep ="")
download.file(url=url, destfile=dest_file, method="auto", quiet = F, mode = "wb", cacheOK = TRUE)
# Crop and save cropped file
org_file <- raster(dest_file)
e <- extent(ref_extent)
cropped_file <- crop(org_file,e)
writeRaster(cropped_file, filename=dest_file, overwrite=TRUE)
print(name)
}
for(f in c(1:length(txt_file))){
# Download file from CHELSA
url <- txt_file[f]
name <- gsub(".*/CHELSA_","",url)
dest_file <- paste("/Users/pburnham/Documents/geospatialData/chelsa_data/",name,sep ="")
download.file(url=url, destfile=dest_file, method="auto", quiet = F, mode = "wb", cacheOK = TRUE)
# Crop and save cropped file
org_file <- raster(dest_file)
e <- extent(ref_extent)
cropped_file <- crop(org_file,e)
writeRaster(cropped_file, filename=dest_file, overwrite=TRUE)
}
for(f in c(1:length(txt_file))){
print(f)
# Download file from CHELSA
url <- txt_file[f]
name <- gsub(".*/CHELSA_","",url)
dest_file <- paste("/Users/pburnham/Documents/geospatialData/chelsa_data/",name,sep ="")
download.file(url=url, destfile=dest_file, method="auto", quiet = F, mode = "wb", cacheOK = TRUE)
# Crop and save cropped file
org_file <- raster(dest_file)
e <- extent(ref_extent)
cropped_file <- crop(org_file,e)
writeRaster(cropped_file, filename=dest_file, overwrite=TRUE)
print(name)
}
getOption('timeout')
options(timeout=100)
getOption('timeout')
for(f in c(1:length(txt_file))){
print(f)
# Download file from CHELSA
url <- txt_file[f]
name <- gsub(".*/CHELSA_","",url)
dest_file <- paste("/Users/pburnham/Documents/geospatialData/chelsa_data/",name,sep ="")
download.file(url=url, destfile=dest_file, method="auto", quiet = F, mode = "wb", cacheOK = TRUE)
# Crop and save cropped file
org_file <- raster(dest_file)
e <- extent(ref_extent)
cropped_file <- crop(org_file,e)
writeRaster(cropped_file, filename=dest_file, overwrite=TRUE)
print(name)
}
options(timeout=100)
txt_file
#load the reticulate package
library(reticulate)
# activate my previously created conda 3.7 environment
use_condaenv(condaenv = "barra_python", conda = "auto", required = FALSE)
import platform
import(platform)
import("platform")
platform = import("platform")
# make sure python 3.7 is laoded
platform$python_version()
py_run_string(
"from spacetime.input.readData import read_data
from spacetime.scale.rasterAlign import raster_align
from spacetime.scale.rasterTrim import raster_trim
from spacetime.objects.fileObject import file_object
from spacetime.operations.cubeSmasher import cube_smasher
from spacetime.operations.makeCube import make_cube
from spacetime.operations.loadCube import load_cube
from spacetime.graphics.dataPlot import plot_cube
from spacetime.output.writeCSV import write_csv
from spacetime.operations.time import cube_time, return_time, scale_time, select_time, expand_time
import matplotlib.pyplot as plt
#import basemap as bm
from spacetime.operations.cubeToDataframe import cube_to_dataframe
import glob
from osgeo import gdal
import numpy as np
from datetime import datetime, timedelta
import pandas as pd
import netCDF4 as nc
import xarray as xr
import re
from itertools import accumulate
import tracemalloc
import tqdm as tqdm
import os
import glob"
)
py_run_string(
"from spacetime.input.readData import read_data
from spacetime.scale.rasterAlign import raster_align
from spacetime.scale.rasterTrim import raster_trim
from spacetime.objects.fileObject import file_object
from spacetime.operations.cubeSmasher import cube_smasher
from spacetime.operations.makeCube import make_cube
from spacetime.operations.loadCube import load_cube
from spacetime.graphics.dataPlot import plot_cube
from spacetime.output.writeCSV import write_csv
from spacetime.operations.time import cube_time, return_time, scale_time, select_time, expand_time
import matplotlib.pyplot as plt
#import basemap as bm
from spacetime.operations.cubeToDataframe import cube_to_dataframe
import glob
from osgeo import gdal
import numpy as np
from datetime import datetime, timedelta
import pandas as pd
import netCDF4 as nc
import xarray as xr
import re
from itertools import accumulate
import tracemalloc
import tqdm as tqdm
import os
import glob"
)
py_run_string("from spacetime.input.readData import read_data")
setwd("~/Documents/GitHub/spacetime_R")
setwd("~/Documents/GitHub/spacetime_R")
# activate my previously created conda 3.7 environment
use_condaenv(condaenv = "barra_python", conda = "auto", required = FALSE)
# import platform
platform = import("platform")
# make sure python 3.9.12 is loaded
platform$python_version()
py_run_string("from spacetime.input.readData import read_data")
py_run_string("from spacetime.input.readData import read_data
from spacetime.scale.rasterAlign import raster_align")
py_run_string("from spacetime.input.readData import read_data from spacetime.scale.rasterAlign import raster_align")
source_python("spacetime/input/readData.R")
source_python("spacetime/input/readData.py")
rd = source_python("spacetime/input/readData.py")
rd
rd <- source_python("spacetime/input/readData.py")
source_python("spacetime/scale/rasterAlign.py")
source_python("spacetime/scale/rasterTrim.py")
source_python("spacetime/objects/fileObject.py")
source_python("spacetime/operations/cubeSmasher.py")
source_python("spacetime/operations/makeCube.py")
source_python("spacetime/operations/loadCube.py")
source_python("spacetime/graphics/dataPlot.py")
source_python("spacetime/output/writeCSV.py")
source_python("spacetime/operations/time.py")
source_python("spacetime/operations/cubeToDataframe.py")
dataPaths <- list.files(path="CpCM", pattern="*.tif", full.names=TRUE, recursive=FALSE)
dataPaths
ds = read_data(dataPaths)
print(ds)
print(ds.get_lat())
print(ds.get_dims())
print(ds$get_dims())
ds$get_dims()
# align rasters
newObj = raster_align(data=ds, noneVal = -9999, SRS=4326)
# trim the rasters to the same greatest common bounding box
trimmed = raster_trim(newObj)
# make the aligned file object into a cube with a time element (writes the new file to disk)
cube = make_cube(data = trimmed, fileName = "cpcm.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
cube$get_epsg_code
cube$get_epsg_code()
cube$get_data_array()
x <- cube$get_data_array()
x
x[3,3]
x[3,3,3]
py_to_r(cube$get_data_array())
str(x)
type(x)
x[0]
x[1,1]
x(1,1,1)
x[1,1,]
# get tif files from CpCM folder
dataPaths <- list.files(path="CpCM", pattern="*.tif", full.names=TRUE, recursive=FALSE)
# read in data
ds = read_data(dataPaths)
# align rasters
newObj = raster_align(data=ds, noneVal = -9999, SRS=4326)
# trim the rasters to the same greatest common bounding box
trimmed = raster_trim(newObj)
# make the aligned file object into a cube with a time element (writes the new file to disk)
cube = make_cube(data = trimmed, fileName = "cpcm.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
# make the aligned file object into a cube with a time element (writes the new file to disk)
cube = make_cube(data = trimmed, fileName = "cpcm.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
x <- cube$get_data_array()
x[1,1,]
x
x[1,1,1]
View(x)
trimmed.get_data_array()
trimmed$get_data_array()
View(x)
x <- trimmed$get_data_array()
View(x)
x[,1,1,1]
x[1,1,1]
x[1,1]
x[1]
x[1][1,1]
x[1][1][1]
x[1][1]
source_python("spacetime/objects/fileObject.py", convert = FALSE)
x <- trimmed$get_data_array()
x
# source modules
source_python("spacetime/input/readData.py", convert = TRUE)
source_python("spacetime/scale/rasterAlign.py", convert = TRUE)
source_python("spacetime/scale/rasterTrim.py", convert = TRUE)
source_python("spacetime/objects/fileObject.py", convert = TRUE)
source_python("spacetime/operations/cubeSmasher.py", convert = TRUE)
source_python("spacetime/operations/makeCube.py", convert = TRUE)
source_python("spacetime/operations/loadCube.py", convert = TRUE)
source_python("spacetime/graphics/dataPlot.py", convert = TRUE)
source_python("spacetime/output/writeCSV.py", convert = TRUE)
source_python("spacetime/operations/time.py", convert = TRUE)
source_python("spacetime/operations/cubeToDataframe.py", convert = TRUE)
# get tif files from CpCM folder
dataPaths <- list.files(path="CpCM", pattern="*.tif", full.names=TRUE, recursive=FALSE)
# read in data
ds = read_data(dataPaths)
# align rasters
newObj = raster_align(data=ds, noneVal = -9999, SRS=4326)
# trim the rasters to the same greatest common bounding box
trimmed = raster_trim(newObj)
# make the aligned file object into a cube with a time element (writes the new file to disk)
cube = make_cube(data = trimmed, fileName = "cpcm.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
# make the aligned file object into a cube with a time element (writes the new file to disk)
cube = make_cube(data = trimmed, fileName = "cpcm.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
x <- trimmed$get_data_array()
x
x <- trimmed$get_lat()
x
x[1]
x[[1]]
x[[1]][4]
x <- trimmed$get_data_array()
x[[1]][4]
x[[1]]
x[[1]][1,1]
x[[1]][1]
View(x)
as.matrix(x)
matrix(x)
array(x)
matrix(x[[1]])
# get tif files from CpCM folder
dataPaths <- list.files(path="CpCM", pattern="*.tif", full.names=TRUE, recursive=FALSE)
# read in data
ds = read_data(dataPaths)
# align rasters
newObj = raster_align(data=ds, noneVal = -9999, SRS=4326)
# trim the rasters to the same greatest common bounding box
trimmed = raster_trim(newObj)
# make the aligned file object into a cube with a time element (writes the new file to disk)
cube = make_cube(data = trimmed, fileName = "cpcm.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
