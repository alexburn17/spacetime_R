newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles, timeObj=timeObj)
} else {
newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles, varNames=varNames, timeObj=timeObj)
}
return(newObj)
}
ds <- read.data(dataPaths)
newObj = raster_align(data=ds, noneVal = -9999, SRS=4326)
trimmed = raster.trim(newObj)
cube = make.cube(data = trimmed, fileName = "cp4.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
#load the reticulate package
library(reticulate)
setwd("~/Documents/GitHub/spacetime_R")
# activate environment
use_condaenv(condaenv = "barra_python", conda = "auto", required = FALSE)
# source modules
source_python("spacetime/input/readData.py", convert = F)
source_python("spacetime/scale/rasterAlign.py", convert = F)
source_python("spacetime/scale/rasterTrim.py", convert = F)
source_python("spacetime/objects/fileObject.py", convert = F)
source_python("spacetime/operations/cubeSmasher.py", convert = F)
source_python("spacetime/operations/makeCube.py", convert = F)
source_python("spacetime/operations/loadCube.py", convert = F)
source_python("spacetime/graphics/dataPlot.py", convert = F)
source_python("spacetime/output/writeCSV.py", convert = F)
source_python("spacetime/operations/time.py", convert = F)
source_python("spacetime/operations/cubeToDataframe.py", convert = F)
# get tif files from CpCM folder
dataPaths <- list.files(path="CpCM", pattern="*.tif", full.names=TRUE, recursive=FALSE)
# read data R wrapper
read.data <- function(data){
ds = read_data(data)
return(ds)
}
# read data R wrapper
raster.trim <- function(data){
ds = raster_trim(data)
return(ds)
}
raster.align <- function(data, resolution, SRS, noneVal){
# align rasters
newObj = raster_align(data=data, resolution=resolution, SRS=SRS, noneVal=noneVal)
return(newObj)
}
make.cube <- function(data, fileName, organizeFiles = "filestotime", organizeBands="bandstotime", varNames="None", timeObj="None"){
# align rasters
if(varNames == "None" & timeObj == "None"){
newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles)
} else if(varNames == "None" & timeObj != "None"){
newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles, timeObj=timeObj)
} else {
newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles, varNames=varNames, timeObj=timeObj)
}
return(newObj)
}
# get lat wrapper
get_lat <- function(obj){
x = py_to_r(obj$get_lat())
return(x)
}
# get lon wrapper
get_lon <- function(obj){
x = py_to_r(obj$get_lon())
return(x)
}
# get UL corner wrapper
get_UL_corner <- function(obj){
x = py_to_r(obj$get_UL_corner())
return(x)
}
# get EPSG code wrapper
get_epsg_code <- function(obj){
x = py_to_r(obj$get_epsg_code())
return(x)
}
# get units wrapper
get_units <- function(obj){
x = py_to_r(obj$get_units())
return(x)
}
# get band number wrapper
get_band_number <- function(obj){
x = py_to_r(obj$get_band_number())
return(x)
}
# get raster dims wrapper
get_dims <- function(obj){
x = unlist(py_to_r(obj$get_dims()))
x <- split(x, ceiling(seq_along(unlist(x))/2))
return(x)
}
# get nodata value wrapper
get_nodata_value <- function(obj){
x = py_to_r(obj$get_nodata_value())
return(x)
}
# get data wrapper
get_data_array <- function(obj){
x = py_to_r(obj$get_data_array())
return(x)
}
# get GDAL data wrapper
get_GDAL_data <- function(obj){
x = py_to_r(obj$get_GDAL_data())
return(x)
}
# get time wrapper
get_time <- function(obj){
x = py_to_r(obj$get_time())
return(x)
}
# get var names wrapper
get_var_names <- function(obj){
x = py_to_r(obj$get_var_names())
return(x)
}
ds <- read.data(dataPaths)
newObj = raster_align(data=ds, noneVal = -9999, SRS=4326)
trimmed = raster.trim(newObj)
cube = make.cube(data = trimmed, fileName = "cp4.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
cube = make.cube(data = trimmed, fileName = "c4.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
source_python("spacetime/operations/makeCube.py", convert = F)
cube = make.cube(data = trimmed, fileName = "c44.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
raster.align <- function(data, resolution, SRS, noneVal){
print(resolution)
# align rasters
newObj = raster_align(data=data, resolution=resolution, SRS=SRS, noneVal=noneVal)
return(newObj)
}
newObj = raster_align(data=ds, noneVal = -9999, SRS=4326)
trimmed = raster.trim(newObj)
cube = make.cube(data = trimmed, fileName = "c44.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
make.cube <- function(data, fileName, organizeFiles, organizeBands, varNames, timeObj){
newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles, varNames=varNames, timeObj=timeObj)
# align rasters
#if(varNames == "None" & timeObj == "None"){
#  newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles)
#} else if(varNames == "None" & timeObj != "None"){
#  newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles, timeObj=timeObj)
#} else {
#  newObj = make_cube(data = data, fileName = fileName, organizeFiles = organizeFiles, organizeFiles=organizeFiles, varNames=varNames, timeObj=timeObj)
#}
return(newObj)
}
ds <- read.data(dataPaths)
newObj = raster_align(data=ds, noneVal = -9999, SRS=4326)
trimmed = raster.trim(newObj)
cube = make.cube(data = trimmed, fileName = "c444.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
newObj = raster_align(data=ds)
ds <- read.data(dataPaths)
newObj = raster_align(data=ds, noneVal = -9999, SRS=4326)
trimmed = raster.trim(newObj)
get_EPSG_code(newObj)
get_epsg_code(newObj)
get_nodata_value(newObj)
newObj = raster_align(data=ds, noneVal = -9990009, SRS=4326)
trimmed = raster.trim(newObj)
get_nodata_value(newObj)
source("spacetime_wrapper.R")
# get tif files from CpCM folder
dataPaths <- list.files(path="CpCM", pattern="*.tif", full.names=TRUE, recursive=FALSE)
ds <- read.data(dataPaths)
newObj = raster_align(data=ds, noneVal = -9999, SRS=4326)
trimmed = raster.trim(newObj)
cube = make.cube(data = trimmed, fileName = "c44.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
source("spacetime_wrapper.R")
# get tif files from CpCM folder
dataPaths <- list.files(path="CpCM", pattern="*.tif", full.names=TRUE, recursive=FALSE)
ds <- read.data(dataPaths)
newObj = raster_align(data=ds, noneVal = -9999, SRS=4326)
trimmed = raster.trim(newObj)
cube = make.cube(data = trimmed, fileName = "c44.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
library(devtools)
install_github("alexburn17/spacetime_R")
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
install_github("/alexburn17/spacetime_R")
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
setwd("~/Documents/GitHub/spacetime_R")
source("spacetime_wrapper.R")
source("R/spacetime_wrapper.R")
# get tif files from CpCM folder
dataPaths <- list.files(path="CpCM", pattern="*.tif", full.names=TRUE, recursive=FALSE)
ds <- read.data(dataPaths)
newObj = raster_align(data=ds, noneVal = -9999, SRS=4326)
trimmed = raster.trim(newObj)
cube = make.cube(data = trimmed, fileName = "c44.nc4", organizeFiles = "filestotime", organizeBands = "bandstotime")
library(devtools)
install_github("alexburn17/spacetime_R")
install.packages("devtollsd")
install_github("alexburn17/spacetime_R")dasfgasd
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
install_github("alexburn17/spacetime_R")
install_github("alexburn17/spacetime_R")
install_github("alexburn17/spacetime_R")
# load the reticulate package
library(reticulate)
# activate environment
use_condaenv(condaenv = "barra_python", conda = "auto", required = FALSE)
# source modules
source_python("spacetime/input/readData.py", convert = F)
source_python("spacetime/scale/rasterTrim.py", convert = F)
source_python("spacetime/objects/fileObject.py", convert = F)
source_python("spacetime/operations/cubeSmasher.py", convert = F)
source_python("spacetime/operations/makeCube.py", convert = F)
source_python("spacetime/operations/loadCube.py", convert = F)
setwd("~/Documents/GitHub/spacetime_R")
install.packages("roxygen2")
library(devtools)
install_github("alexburn17/spacetime_R")
# activate environment
use_condaenv(condaenv = "barra_python", conda = "auto", required = FALSE)
dependancies <- c("pandas")
dependancies <- c("pandas")
py_install(
packages = dependancies,
envname = NULL,
method = "auto",
python_version = 3.9.16,
py_install(
packages = dependancies,
envname = NULL,
method = "auto",
python_version = "3.9.16",
pip = TRUE
)
py_install(
packages = dependancies,
envname = NULL,
method = "conda",
python_version = "3.9.16",
pip = TRUE
)
use_condaenv(condaenv = "r-reticulate", conda = "auto", required = FALSE)
library(devtools)
install_github("alexburn17/spacetime_R")
reticulate::py_config()
library(devtools)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
# python packages to install
dependancies <- c("pandas", "numpy", "netCDF4")
# install python
py_install(
packages = dependancies,
envname = NULL,
method = "conda",
python_version = "3.9.16",
pip = TRUE
)
# python packages to install
dependancies <- c("pandas", "numpy", "netCDF4", "gdal")
# install python
py_install(
packages = dependancies,
envname = NULL,
method = "conda",
python_version = "3.9.16",
pip = TRUE
)
conda_install("r-reticulate", "gdal")
# activate environment
use_condaenv(condaenv = "r-reticulate", conda = "auto", required = TRUE)
# python packages to install
dependancies <- c("pandas", "numpy", "netCDF4", "gdal")
# install python
py_install(
packages = dependancies,
envname = "r-reticulate",
method = "conda",
python_version = "3.9.16",
pip = TRUE
)
library(devtools)
install_github("alexburn17/spacetime_R")
library(spacetime)
# get tif files from CpCM folder
dataPaths <- list.files(path="/Users/pburnham/Documents/data", pattern="*.tif", full.names=TRUE, recursive=FALSE)
do_a_thing(3)
spacetime::do_a_thing(3)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
library(spacetime)
spacetime::do_a_thing(3)
library(spacetime)
install_github("alexburn17/spacetime_R")
library(spacetime)
do_a_thing()
do_a_thing(3)
library(spacetime)
do_a_thing(3)
gc()
library(spacetime)
spacetime::do_a_thing(3)
# activate environment
use_condaenv(condaenv = "r-reticulate", conda = "auto", required = TRUE)
library(reticulate)
# python packages to install
dependancies <- c("pandas", "numpy")
py_install(
packages = dependancies,
envname = "auto",
method = "conda",
python_version = "3.9.16",
pip = TRUE
)
print("installing required python packages")
conda_install("r-reticulate", "gdal")
conda_install("r-reticulate", "xarray")
conda_install("r-reticulate", "psutil")
conda_install("r-reticulate", "plotly_express")
conda_install("r-reticulate", "netCDF4")
# activate environment
use_condaenv(condaenv = "r-reticulate", conda = "auto", required = TRUE)
# activate environment
use_condaenv(condaenv = "r-miniconda", conda = "auto", required = TRUE)
library(reticulate)
# python packages to install
dependancies <- c("pandas", "numpy")
py_install(
packages = dependancies,
envname = "auto",
method = "conda",
python_version = "3.9.16",
pip = TRUE
)
print("installing required python packages")
conda_install("r-reticulate", "gdal")
conda_install("r-reticulate", "xarray")
conda_install("r-reticulate", "psutil")
conda_install("r-reticulate", "plotly_express")
conda_install("r-reticulate", "netCDF4")
# activate environment
use_condaenv(condaenv = "r-miniconda", conda = "auto", required = TRUE)
# activate environment
use_condaenv(condaenv = "r-reticulate", conda = "auto", required = TRUE)
spacetime::do_a_thing(3)
ds <- spacetime::read.data(data=dataPaths)
install_github("xalexburn17/spacetime_R")
library(devtools)
install_github("xalexburn17/spacetime_R")
library(spacetime)
spacetime::do_a_thing(3)
install_github("alexburn17/spacetime_R")
library(devtools)
install_github("alexburn17/spacetime_R")
library(spacetime)
spacetime::do_a_thing(3)
library(devtools)
install_github("alexburn17/spacetime_R")
library(spacetime)
spacetime::do_a_thing(3)
use_condaenv(condaenv = "r-reticulate", conda = "auto", required = TRUE)
use_condaenv(condaenv = "r-reticulate", conda = "auto", required = TRUE)
install_github("alexburn17/spacetime_R")
library(spacetime)
spacetime::do_a_thing(3)
spacetime::do_a_thing(3)
library(tidyverse)
library(dplyr)
library(ggplot2)
setwd("~/Documents/GitHub/SARE")
# Read in Cornell Results Dataset !NOTE! - find more general solution to white space/column headers
pest_Results <- read.csv("pesticide_data_to_merge/pesticide_results_2021.csv", header = TRUE,
stringsAsFactors = FALSE, skip = 1)
# Read in Tosi Datasets
tosi_lethal <- read.csv("pesticide_data_to_merge/Tosi_lethal.csv", header = TRUE, stringsAsFactors = FALSE, skip = 1)
tosi_sublethal <- read.csv("pesticide_data_to_merge/Tosi_sublethal.csv", header = TRUE, stringsAsFactors = FALSE)
# Read in Description Dataset (NHBS descriptions)
pest_Desc <- read.csv("pesticide_data_to_merge/pestDesc.csv", header = TRUE, stringsAsFactors = FALSE)
# Read in additional description information (classification info in Google Sheet from Colin)
pest_Desc_additionalinfo <- read.csv("pesticide_data_to_merge/pestDesc_additioninfo.csv", header = TRUE, stringsAsFactors = FALSE)
# Read in updated description information - Colin
pest_Desc_updated <- read.csv("pesticide_data_to_merge/updated_descriptions_4-1-23.csv")
# replace n.d. with NA
pest_Results[pest_Results == "n.d."] <- NA
# find our cut points
LS_row <- which(pest_Results == "Large Scale", arr.ind=TRUE)[1]
SS_row <- which(pest_Results == "Small Scale", arr.ind=TRUE)[1]
SS_filename_row <- which(pest_Results == "File Name", arr.ind=TRUE)[1]
bottom_row <- which(pest_Results == "Results are in ppb.", arr.ind=TRUE)[1] #find regex solution Results are in *
# cut out our data frames
LS_df <- pest_Results[1:(LS_row-1),]
SS_df <- pest_Results[(SS_filename_row+1):(SS_row-1),]
# cut out look up tables
LS_lookup <- pest_Results[LS_row:(LS_row+3),]
SS_lookup <- pest_Results[SS_row:(SS_row+3),]
#######################################################
# LIMIT FINDER FUNCTION
#######################################################
limit_finder <- function(df, search, lookup, scale){
# find where samples say <loq
loqVals <- data.frame(which(df == search, arr.ind=TRUE))
if(length(loqVals$row>0)){
# pull out mass and lod and do out the division
mass <- as.numeric(df$Mass..g.[loqVals$row])
scaleNum <- ifelse(search==">ULOQ", 3, 1) # convert scale into row index
print(scaleNum)
lod <- as.numeric(lookup[scaleNum,loqVals$col])
results <- lod/mass
# assign results to index where loq was found
for(i in 1:length(results)){
df[loqVals$row[i], loqVals$col[i]] <- results[i]
}
}
return(df)
}
LS_df <- limit_finder(df = LS_df, search = "<LOQ", lookup = LS_lookup)
SS_df <- limit_finder(df = SS_df, search = "<LOQ", lookup = SS_lookup)
LS_df <- limit_finder(df = LS_df, search = ">ULOQ", lookup = LS_lookup)
SS_df <- limit_finder(df = SS_df, search = ">ULOQ", lookup = SS_lookup)
# append dataframes
pest_df <- rbind(LS_df, SS_df)
# create small scale/large scale column
pest_df$scale <- ifelse(pest_df$Mass..g. < 1, "small", "large")
str(pest_df)
################################################################################
# Cleaning LD50 Dataset -- Tosi Lethal
################################################################################
tosi_lethal
# convert blank spaces to NA
tosi_lethal[tosi_lethal == " "] <- NA
tosi_lethal[tosi_lethal == ""] <- NA
# changing column names
colnames(tosi_lethal) # original column names
tosi_lethal_colnames <- c("pesticide_name", "other_names","cas", "pesticide_type", "MoA_short", "MoA_classification_site_target", "oral_LD50_geometricmean_ugbee", "oral_source_num","oral_LD50_min", "oralQ1", "oralQ2_median", "oralQ3", "oral_LD50_max", "oral_range", "oral_source_name", "oral_LD50_1", "oral_LD50_2", "oral_LD50_3", "oral_LD50_4", "oral_LD50_5", "contact_LD50_geometricmean_ugbee","contact_source_num","contact_LD50_min", "contactQ1", "contactQ2_median", "contactQ3", "contact_LD50_max","contact_range", "contact_source_name", "contact_LD50_1", "contact_LD50_2","contact_LD50_3")
colnames(tosi_lethal) <- tosi_lethal_colnames
# finding minLD50 value - all units are ug/bee
# NOTE: Transform to PPB
tl <- tosi_lethal %>% rowwise() %>% mutate(min_LD50_value = min(oral_LD50_min, oral_LD50_1, oral_LD50_2, oral_LD50_3, oral_LD50_4, oral_LD50_5, contact_LD50_min, contact_LD50_1, contact_LD50_2, contact_LD50_3, na.rm = TRUE))
# remove Inf values
tl$min_LD50_value <- ifelse(tl$min_LD50_value == "Inf", NA, tl$min_LD50_value)
# remove rows with NA for LD50
tosi_lethal_noNA <- tl[!is.na(tl$min_LD50_value), ]
# summarize for each chemical
TL_simplified <- tosi_lethal_noNA %>%
group_by(pesticide_name) %>% # pick variables to group by
summarise(
min_LD50_value = min(min_LD50_value, na.rm=T),
)
colnames(tosi_sublethal)
tosi_sublethal_colnames <- c("pesticide_name", "cas", "pesticide_type", "MoA_short", "MoA_classification_site_taret", "survey_inclusion_name", "screened_in_survey", "num_survery_screenings", "oral_LD50_geometricmean_ugbee", "oral_source_name", "contact_LD50_geometricmean_ugbee", "contact_source_name", "LOAEL_allunits", "LOAEL_unit_measure", "LOAEL_ug/bee/day", "LOAEL_category_ug/bee", "SubTR_LOAEL/LD50", "SubTR_category", "exposure_type_oral_v_contact", "exposure_type_acute_v_chronic", "exposure_duration_h", "time_after_exposure_of_significant_effect_h", "feedtype_main_category", "feedtype_subcategory", "feedtype_concentration", "bee_type", "bee_genus", "bee_species", "bee_species_details", "sublethal_effect_main_category", "sublethal_effect_subcategory", "sublethal_effect_details", "original_ref", "ref_year", "review_ref")
colnames(tosi_sublethal) <- tosi_sublethal_colnames
tosi_sublethal[tosi_sublethal == " "] <- NA
tosi_sublethal[tosi_sublethal == ""] <- NA
tosi_sublethal$LOAEL_unit_measure <- as.character(tosi_sublethal$LOAEL_unit_measure)
str(tosi_sublethal$LOAEL_unit_measure)
which(table(tosi_sublethal$LOAEL_unit_measure)>=1)
# could unit measures be put into a function for conversion to ppb?
tosi_sublethal_unit_measures <- c("µg/bee", "µM", "g/bee/week", "g/ha", "g/hive", "g/hm-2", "gals/acre", "μg", "μg/bee",
"μg/bee/day", "μg/larva", "μL", "μL/bee", "μM", "kg/ha", "MFR", "mL/bee", "mL/colony",
"mM", "mm3 /bee", "ng/L", "ng/ml", "nM", "nmol/bee", "nmol/day/bee", "ppb", "ppm", "unclear")
tosi_sublethal$LOAEL_ug_per_bee <- tosi_sublethal$`LOAEL_ug/bee/day`
# remove rows with NA for LOAEL
tosi_sublethal_noNA <- tosi_sublethal[!is.na(tosi_sublethal$LOAEL_ug_per_bee), ]
# make variable of bee genus simplified
tosi_sublethal_noNA$bee_genus_simple <- ifelse(tosi_sublethal_noNA$bee_genus == "Apis", "Honeybee", ifelse(
tosi_sublethal_noNA$bee_genus == "Bombus", "Bumblebee", "Other")
)
# TO DO: convert to PPB
# LOAEL: Lowest Observed Adverse effect level
# N studies found sublethal impacts of this chemical on beeGenera. The lowest concentration accross studies is X
# summarize for each chemical - min value fro LOAEL - block by bee type and sum number of pubs
TS_simplified <- tosi_sublethal_noNA %>% # operate on the dataframe (ds_2021) and assign to new object (pltN)
group_by(pesticide_name, bee_genus_simple) %>% # pick variables to group by
summarise(
min_LOAEL_ug_per_bee = min(LOAEL_ug_per_bee, na.rm=T), # mean
numPubs = length(original_ref),
)
################################################
# Cleaning Pest_Desc Dataset (NHBS descriptions)
################################################
# pest_Desc
# changing column names
colnames(pest_Desc) # original column names
pest_Desc_colnames <- c("pesticide_name", "description", "pesticide_type")
colnames(pest_Desc) <- pest_Desc_colnames
# eliminating rows with redundant values from transition to csv
pest_Desc <- subset(pest_Desc, pest_Desc$pesticide_name != "Pesticide")
pest_Desc_updated[pest_Desc_updated == " "] <- NA
pest_Desc_updated[pest_Desc_updated == ""] <- NA
## 1st description dataset merge
# Merging pest_Desc_additionalinfo to pest_Desc, creating pest_Desc_combined
pest_Desc_combined <- merge(y = pest_Desc, x = pest_Desc_additionalinfo, by = "pesticide_name", all = TRUE)
##2nd description dataset merge
# Merging pest_Desc_updated into pest_Desc_combined
pest_Desc_combined <- merge(y = pest_Desc_combined, x = pest_Desc_updated , by = "pesticide_name", all = TRUE)
# Merging Tosi Datasets
tosi_combined <- merge(TL_simplified, TS_simplified, by = "pesticide_name", all = TRUE)
View(pest_Desc_combined)
View(pest_df)
str(pest_df)
View(pest_df)
